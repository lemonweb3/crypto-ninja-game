// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞—à–µ–π –∏–≥—Ä—ã
const GAME_CONFIG = {
  title: 'Crypto Ninja',
  description: 'Slice the crypto coins!',
  welcomeImage: 'https://i.ibb.co/yB5XVsv8/2cf8a48c2e58861e697635aad7b0ffe6.jpg',
  gameImage: 'https://i.ibb.co/yB5XVsv8/2cf8a48c2e58861e697635aad7b0ffe6.jpg',
  gameOverImage: 'https://i.ibb.co/yB5XVsv8/2cf8a48c2e58861e697635aad7b0ffe6.jpg',
  roundDuration: 60,
  penaltyAmount: 50,
  rewardAmount: 100,
  livesCount: 3,
};

// –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è –∏–≥—Ä—ã
const COINS = [
  { name: 'Bitcoin', symbol: 'BTC', emoji: '‚Çø', points: 100 },
  { name: 'Ethereum', symbol: 'ETH', emoji: 'Œû', points: 80 },
  { name: 'Dogecoin', symbol: 'DOGE', emoji: '√ê', points: 50 },
  { name: 'Solana', symbol: 'SOL', emoji: '‚óé', points: 70 },
  { name: 'SCAM', symbol: 'SCAM', emoji: 'üí£', points: -150, isScam: true },
];

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã –∫–∞–∫ —Ç–∏–ø
type GameScreen = 'menu' | 'game' | 'rules' | 'leaderboard' | 'shop' | 'gameOver';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
interface GameState {
  score: number;
  lives: number;
  currentCoin: typeof COINS[0];
  options: typeof COINS;
  gameOver: boolean;
  startTime: number;
  combo: number;
  currentScreen: GameScreen;
}

// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
function createNewGameState(): GameState {
  const shuffledCoins = [...COINS].sort(() => Math.random() - 0.5);
  const options = shuffledCoins.filter(coin => !coin.isScam).slice(0, 2);
  if (Math.random() < 0.3) {
    options.push(COINS.find(coin => coin.isScam)!);
  } else {
    options.push(shuffledCoins[2]);
  }
  
  return {
    score: 0,
    lives: GAME_CONFIG.livesCount,
    currentCoin: shuffledCoins[0],
    options: options.sort(() => Math.random() - 0.5),
    gameOver: false,
    startTime: Date.now(),
    combo: 1,
    currentScreen: 'menu'
  };
}

// –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
function getRemainingTime(startTime: number): number {
  const elapsed = (Date.now() - startTime) / 1000;
  return Math.max(0, GAME_CONFIG.roundDuration - elapsed);
}

// –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –º–µ–Ω—é
function createMenuFrame() {
  return {
    version: 'vNext',
    image: GAME_CONFIG.welcomeImage,
    title: '‚öîÔ∏è ' + GAME_CONFIG.title,
    buttons: [
      {
        label: 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
        action: 'post',
      },
      {
        label: 'üìú –ü—Ä–∞–≤–∏–ª–∞',
        action: 'post',
      },
      {
        label: 'üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤',
        action: 'post',
      },
      {
        label: 'üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω',
        action: 'post',
      }
    ],
  };
}

// –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å –∏–≥—Ä–æ–π
function createGameFrame(state: GameState) {
  const remainingTime = getRemainingTime(state.startTime);
  
  if (state.gameOver || remainingTime <= 0) {
    return {
      version: 'vNext',
      image: GAME_CONFIG.gameOverImage,
      title: `üéÆ Game Over! Final Score: ${state.score}`,
      buttons: [
        {
          label: 'üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞',
          action: 'post',
        },
        {
          label: 'üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤',
          action: 'post',
        },
        {
          label: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
          action: 'post',
        }
      ],
    };
  }

  return {
    version: 'vNext',
    image: GAME_CONFIG.gameImage,
    title: `Score: ${state.score} | Lives: ${'‚ù§Ô∏è'.repeat(state.lives)} | Combo: x${state.combo}`,
    buttons: state.options.map(coin => ({
      label: `${coin.emoji} ${coin.name} (${coin.isScam ? '‚ò†Ô∏è' : '+' + coin.points})`,
      action: 'post',
    })),
  };
}

// –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –ø—Ä–∞–≤–∏–ª
function createRulesFrame() {
  return {
    version: 'vNext',
    image: GAME_CONFIG.welcomeImage,
    title: 'üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã',
    buttons: [
      {
        label: 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
        action: 'post',
      },
      {
        label: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        action: 'post',
      }
    ],
  };
}

// –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
function createLeaderboardFrame() {
  return {
    version: 'vNext',
    image: GAME_CONFIG.welcomeImage,
    title: 'üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (—Å–∫–æ—Ä–æ)',
    buttons: [
      {
        label: 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
        action: 'post',
      },
      {
        label: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        action: 'post',
      }
    ],
  };
}

// –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –º–∞–≥–∞–∑–∏–Ω–∞
function createShopFrame() {
  return {
    version: 'vNext',
    image: GAME_CONFIG.welcomeImage,
    title: 'üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω (—Å–∫–æ—Ä–æ)',
    buttons: [
      {
        label: 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
        action: 'post',
      },
      {
        label: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        action: 'post',
      }
    ],
  };
}

// GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ—Ä–µ–π–º–∞
export async function GET() {
  return Response.json({
    frames: [createMenuFrame()],
  });
}

// POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫
export async function POST(request: Request) {
  const data = await request.json();
  const { buttonIndex, state: savedState } = data.untrustedData;
  
  let gameState = createNewGameState();

  if (savedState) {
    try {
      gameState = JSON.parse(savedState);
    } catch {
      console.error('Failed to parse saved state');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  if (gameState.currentScreen === 'menu' || !savedState) {
    switch (buttonIndex) {
      case 1: // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
        gameState.currentScreen = 'game';
        return Response.json({
          frames: [createGameFrame(gameState)],
          state: JSON.stringify(gameState),
        });
      case 2: // –ü—Ä–∞–≤–∏–ª–∞
        gameState.currentScreen = 'rules';
        return Response.json({
          frames: [createRulesFrame()],
          state: JSON.stringify(gameState),
        });
      case 3: // –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
        gameState.currentScreen = 'leaderboard';
        return Response.json({
          frames: [createLeaderboardFrame()],
          state: JSON.stringify(gameState),
        });
      case 4: // –ú–∞–≥–∞–∑–∏–Ω
        gameState.currentScreen = 'shop';
        return Response.json({
          frames: [createShopFrame()],
          state: JSON.stringify(gameState),
        });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ –¥—Ä—É–≥–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
  if (gameState.currentScreen === 'rules' || 
      gameState.currentScreen === 'leaderboard' || 
      gameState.currentScreen === 'shop') {
    if (buttonIndex === 1) { // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
      gameState = createNewGameState();
      gameState.currentScreen = 'game';
      return Response.json({
        frames: [createGameFrame(gameState)],
        state: JSON.stringify(gameState),
      });
    }
    if (buttonIndex === 2) { // –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      gameState.currentScreen = 'menu';
      return Response.json({
        frames: [createMenuFrame()],
        state: JSON.stringify(gameState),
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
  if (gameState.currentScreen === 'gameOver') {
    switch (buttonIndex) {
      case 1: // –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
        gameState = createNewGameState();
        gameState.currentScreen = 'game';
        return Response.json({
          frames: [createGameFrame(gameState)],
          state: JSON.stringify(gameState),
        });
      case 2: // –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
        gameState.currentScreen = 'leaderboard';
        return Response.json({
          frames: [createLeaderboardFrame()],
          state: JSON.stringify(gameState),
        });
      case 3: // –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        gameState.currentScreen = 'menu';
        return Response.json({
          frames: [createMenuFrame()],
          state: JSON.stringify(gameState),
        });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
  if (gameState.currentScreen === 'game') {
    if (getRemainingTime(gameState.startTime) <= 0) {
      gameState.gameOver = true;
      gameState.currentScreen = 'gameOver';
      return Response.json({
        frames: [createGameFrame(gameState)],
        state: JSON.stringify(gameState),
      });
    }

    const selectedCoin = gameState.options[buttonIndex - 1];
    
    if (selectedCoin.isScam) {
      gameState.lives--;
      gameState.combo = 1;
      gameState.score = Math.max(0, gameState.score + selectedCoin.points);
    } else {
      const points = selectedCoin.points * gameState.combo;
      gameState.score += points;
      gameState.combo++;
    }

    if (gameState.lives <= 0) {
      gameState.gameOver = true;
      gameState.currentScreen = 'gameOver';
      return Response.json({
        frames: [createGameFrame(gameState)],
        state: JSON.stringify(gameState),
      });
    }

    const newState = {
      ...createNewGameState(),
      score: gameState.score,
      lives: gameState.lives,
      combo: gameState.combo,
      startTime: gameState.startTime,
      currentScreen: 'game' as GameScreen
    };

    return Response.json({
      frames: [createGameFrame(newState)],
      state: JSON.stringify(newState),
    });
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  return Response.json({
    frames: [createMenuFrame()],
    state: JSON.stringify(createNewGameState()),
  });
}