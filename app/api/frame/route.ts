// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞—à–µ–π –∏–≥—Ä—ã
const GAME_CONFIG = {
  title: 'Crypto Ninja',
  description: 'Slice the crypto coins!',
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ URL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä—ã
  welcomeImage: 'https://images.unsplash.com/photo-1593397899681-12c47155d9b8?q=80&w=1200&h=630&fit=crop',
  gameImage: 'https://images.unsplash.com/photo-1593397899681-12c47155d9b8?q=80&w=1200&h=630&fit=crop', // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ–Ω
  gameOverImage: 'https://images.unsplash.com/photo-1593397899681-12c47155d9b8?q=80&w=1200&h=630&fit=crop', // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ–Ω
  roundDuration: 60,
  penaltyAmount: 50,
  rewardAmount: 100,
  livesCount: 3,
};

// –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è –∏–≥—Ä—ã
const COINS = [
  { name: 'Bitcoin', symbol: 'BTC', emoji: '‚Çø', points: 100 },
  { name: 'Ethereum', symbol: 'ETH', emoji: 'Œû', points: 80 },
  { name: 'Dogecoin', symbol: 'DOGE', emoji: '√ê', points: 50 },
  { name: 'Solana', symbol: 'SOL', emoji: '‚óé', points: 70 },
  // –î–æ–±–∞–≤–∏–º "–æ–ø–∞—Å–Ω—ã–µ" –º–æ–Ω–µ—Ç—ã
  { name: 'SCAM', symbol: 'SCAM', emoji: 'üí£', points: -150, isScam: true },
];

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
interface GameState {
  score: number;
  lives: number;
  currentCoin: typeof COINS[0];
  options: typeof COINS;
  gameOver: boolean;
  startTime: number;
  combo: number;
}

// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
function createNewGameState(): GameState {
  const shuffledCoins = [...COINS].sort(() => Math.random() - 0.5);
  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–∫–∞–º-–º–æ–Ω–µ—Ç–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ä–µ–∂–µ
  const options = shuffledCoins.filter(coin => !coin.isScam).slice(0, 2);
  if (Math.random() < 0.3) { // 30% —à–∞–Ω—Å –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–∫–∞–º-–º–æ–Ω–µ—Ç—ã
    options.push(COINS.find(coin => coin.isScam)!);
  } else {
    options.push(shuffledCoins[2]);
  }
  
  return {
    score: 0,
    lives: GAME_CONFIG.livesCount,
    currentCoin: shuffledCoins[0],
    options: options.sort(() => Math.random() - 0.5),
    gameOver: false,
    startTime: Date.now(),
    combo: 1
  };
}

// –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
function getRemainingTime(startTime: number): number {
  const elapsed = (Date.now() - startTime) / 1000;
  return Math.max(0, GAME_CONFIG.roundDuration - elapsed);
}

// –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å –∏–≥—Ä–æ–π
function createGameFrame(state: GameState) {
  const remainingTime = getRemainingTime(state.startTime);
  
  if (state.gameOver || remainingTime <= 0) {
    return {
      version: 'vNext',
      image: GAME_CONFIG.gameOverImage,
      title: `üéÆ Game Over! Final Score: ${state.score}`,
      buttons: [
        {
          label: 'üîÑ Play Again',
          action: 'post',
        },
        {
          label: 'üèÜ Share Score',
          action: 'post',
        }
      ],
    };
  }

  return {
    version: 'vNext',
    image: GAME_CONFIG.gameImage,
    title: `Score: ${state.score} | Lives: ${'‚ù§Ô∏è'.repeat(state.lives)} | Combo: x${state.combo}`,
    buttons: state.options.map(coin => ({
      label: `${coin.emoji} ${coin.name} (${coin.isScam ? '‚ò†Ô∏è' : '+' + coin.points})`,
      action: 'post',
    })),
  };
}

// –ù–∞—á–∞–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º
const initialFrame = {
  version: 'vNext',
  image: GAME_CONFIG.welcomeImage,
  title: '‚öîÔ∏è ' + GAME_CONFIG.title,
  buttons: [
    {
      label: 'üéÆ Start Game',
      action: 'post',
    },
    {
      label: 'üìú Rules',
      action: 'post',
    }
  ],
};

// GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ—Ä–µ–π–º–∞
export async function GET() {
  return Response.json({
    frames: [initialFrame],
  });
}

// POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫
export async function POST(request: Request) {
  const data = await request.json();
  const { buttonIndex, state: savedState } = data.untrustedData;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º gameState –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  let gameState = createNewGameState();

  // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (savedState) {
    try {
      gameState = JSON.parse(savedState);
    } catch {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.error('Failed to parse saved state');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  if (!savedState) {
    if (buttonIndex === 1) { // Start Game
      return Response.json({
        frames: [createGameFrame(gameState)],
        state: JSON.stringify(gameState),
      });
    }

    if (buttonIndex === 2) { // Rules
      return Response.json({
        frames: [{
          version: 'vNext',
          image: GAME_CONFIG.welcomeImage,
          title: 'üìú Game Rules',
          buttons: [
            {
              label: 'üéÆ Start Game',
              action: 'post',
            }
          ],
        }],
      });
    }
  } else {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –ª–∏ –≤—Ä–µ–º—è
    if (getRemainingTime(gameState.startTime) <= 0) {
      gameState.gameOver = true;
      return Response.json({
        frames: [createGameFrame(gameState)],
        state: JSON.stringify(gameState),
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    const selectedCoin = gameState.options[buttonIndex - 1];
    
    if (selectedCoin.isScam) {
      // –ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª —Å–∫–∞–º-–º–æ–Ω–µ—Ç—É
      gameState.lives--;
      gameState.combo = 1;
      gameState.score = Math.max(0, gameState.score + selectedCoin.points);
    } else {
      // –û–±—ã—á–Ω–∞—è –º–æ–Ω–µ—Ç–∞
      const points = selectedCoin.points * gameState.combo;
      gameState.score += points;
      gameState.combo++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–º–±–æ
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    if (gameState.lives <= 0) {
      gameState.gameOver = true;
      return Response.json({
        frames: [createGameFrame(gameState)],
        state: JSON.stringify(gameState),
      });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    const newState = {
      ...createNewGameState(),
      score: gameState.score,
      lives: gameState.lives,
      combo: gameState.combo,
      startTime: gameState.startTime,
    };

    return Response.json({
      frames: [createGameFrame(newState)],
      state: JSON.stringify(newState),
    });
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
  return Response.json({
    frames: [initialFrame],
  });
}